rules_version = '2';
service cloud.firestore {
  // ---------- Hilfsfunktionen ----------
  function isAdmin() {
    return request.auth != null &&
      (
        request.auth.token.role == 'admin' ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
  }

  function isMemberOfGym(gymId) {
    return request.auth != null &&
      get(/databases/$(database)/documents/users/$(request.auth.uid))
        .data.gymCodes.hasAll([gymId]);
  }

  match /databases/{database}/documents {
    // ------------------------
    // Gyms & Unter-Collections
    // ------------------------
    match /gyms/{gymId} {
      allow read: if true;                // Gym-Daten sind öffentlich
      allow write: if false;              // kein direktes Schreiben auf Gym-Dokumente

      // Geräte-Verwaltung
      match /devices/{deviceId} {
        allow read: if true;
        allow create: if isAdmin() &&
          request.resource.data.keys().hasOnly(['name', 'description', 'nfcCode', 'isMulti']) &&
          request.resource.data.name        is string &&
          request.resource.data.description is string &&
          (request.resource.data.nfcCode is string || request.resource.data.nfcCode == null) &&
          request.resource.data.isMulti     is bool;
        allow update: if isAdmin() &&
          request.resource.data.keys().hasOnly(['nfcCode']) &&
          request.resource.data.nfcCode is string;
        allow delete: if isAdmin();

        // Übungen pro Gerät
        match /exercises/{exerciseId} {
          allow read: if request.auth != null;
          allow create, delete:
            if request.auth != null &&
               request.resource.data.userId == request.auth.uid;
          allow update: if false;
        }

        // Workout-Logs
        match /logs/{logId} {
          allow create: if request.auth != null &&
            request.resource.data.userId    == request.auth.uid &&
            request.resource.data.exerciseId is string &&
            request.resource.data.weight     is int &&
            request.resource.data.reps       is int &&
            request.resource.data.sessionId  is string &&
            request.resource.data.timestamp  is timestamp &&
            (request.resource.data.note is string || request.resource.data.note == null);
          allow read:
            if isAdmin() ||
               isMemberOfGym(gymId) ||
               (request.auth != null && resource.data.userId == request.auth.uid);
          allow update, delete: if false;
        }

        // User-Notizen
        match /userNotes/{userId} {
          allow create, read, update, delete:
            if request.auth != null && request.auth.uid == userId;
        }
      }

      // ------------------------
      // Leaderboard & XP
      // ------------------------
      match /leaderboard/{userId} {
        // Lesen: Admin, Gym-Mitglieder oder der Nutzer selbst
        allow read:
          if isAdmin() ||
             (request.auth != null &&
               (request.auth.uid == userId || isMemberOfGym(gymId)));

        // Schreiben: nur eigener Eintrag, nur xp & updatedAt
        allow create, update:
          if request.auth != null &&
             request.auth.uid == userId &&
             request.resource.data.keys().hasOnly(['xp', 'updatedAt']) &&
             request.resource.data.xp        is int &&
             (request.resource.data.updatedAt is timestamp || !('updatedAt' in request.resource.data));

        match /dailySessions/{sessionId} {
          allow create:
            if request.auth != null &&
               request.auth.uid == userId &&
               // pro Gerät/Tag nur einmal
               !exists(/databases/$(database)/documents/gyms/$(gymId)/leaderboard/$(userId)/dailySessions/$(sessionId)) &&
               // nur Einzelgeräte erhalten XP
               get(/databases/$(database)/documents/gyms/$(gymId)/devices/$(request.resource.data.deviceId))
                 .data.isMulti == false &&
               request.resource.data.deviceId is string &&
               request.resource.data.date     is string;
          allow read: if request.auth != null && request.auth.uid == userId;
          allow update, delete: if false;
        }
      }
    }

    // ------------------------
    // User-Profile
    // ------------------------
    match /users/{userId} {
      allow create:
        if request.auth != null && request.auth.uid == userId;

      allow read:
        if request.auth != null && request.auth.uid == userId;

      // gymCodes & showInLeaderboard dürfen nicht vom Client überschrieben werden
      allow update:
        if request.auth != null &&
           request.auth.uid == userId &&
           !request.resource.data.keys().hasAny(['gymCodes', 'showInLeaderboard']);

      allow delete: if false;
    }
  }
}
