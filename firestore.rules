rules_version = '2';
service cloud.firestore {
  // Prüft, ob der angemeldete Nutzer Admin ist.
  function isAdmin() {
    return request.auth != null
      && (
           request.auth.token.role == 'admin'
        || get(/databases/$(database)/documents/users/$(request.auth.uid))
             .data.role == 'admin'
      );
  }

  // Prüft, ob der Nutzer dem Gym angehört (gymCodes ist ein Array).
  function isMemberOfGym(gymId) {
    return request.auth != null
      && get(/databases/$(database)/documents/users/$(request.auth.uid))
           .data.gymCodes.hasAny([gymId]);
  }

  match /databases/{database}/documents {
    // --- Gyms & Unterbäume ---
    match /gyms/{gymId} {
      allow read: if true;
      allow write: if false;

      // Geräte-Verwaltung
      match /devices/{deviceId} {
        allow read:   if true;
        allow create: if isAdmin()
          && request.resource.data.keys().hasOnly(
               ['name', 'description', 'nfcCode', 'isMulti']
             )
          && request.resource.data.name        is string
          && request.resource.data.description is string
          && (request.resource.data.nfcCode is string
              || request.resource.data.nfcCode == null)
          && request.resource.data.isMulti     is bool;
        allow update: if isAdmin()
          && request.resource.data.keys().hasOnly(['nfcCode'])
          && request.resource.data.nfcCode     is string;
        allow delete: if isAdmin();

        // Übungen
        match /exercises/{exerciseId} {
          allow read:   if request.auth != null;
          allow create, delete:
            if request.auth != null
              && request.resource.data.userId == request.auth.uid;
          allow update: if false;
        }

        // Logs
        match /logs/{logId} {
          allow create: if request.auth != null
            && request.resource.data.userId    == request.auth.uid
            && request.resource.data.exerciseId is string
            && request.resource.data.weight     is int
            && request.resource.data.reps       is int
            && request.resource.data.sessionId  is string
            && request.resource.data.timestamp  is timestamp
            && (
                 request.resource.data.note is string
                 || request.resource.data.note == null
               );
          allow read:
            if isAdmin()
            || isMemberOfGym(gymId)
            || (
                 request.auth != null
                 && resource.data.userId == request.auth.uid
               );
          allow update, delete: if false;
        }

        // Nutzer-Notes
        match /userNotes/{userId} {
          allow create, read, update, delete:
            if request.auth != null && request.auth.uid == userId;
        }
      }

      // Leaderboard
      match /leaderboard/{userId} {
        // Einträge dürfen Admins, der Besitzer selbst und Mitglieder
        // des Gyms lesen.
        allow read: if isAdmin()
          || (
               request.auth != null
               && (
                    request.auth.uid == userId
                    || isMemberOfGym(gymId)
                  )
             );

        // Nur der Nutzer selbst darf seinen XP-Wert anlegen/aktualisieren.
        allow create, update: if request.auth != null
          && request.auth.uid == userId
          && request.resource.data.keys().hasOnly(
               ['xp', 'updatedAt', 'showInLeaderboard']
             )
          && request.resource.data.xp                is int
          && request.resource.data.showInLeaderboard is bool
          && request.resource.data.updatedAt         is timestamp;
        allow delete: if false;

        // Eintrag pro Tag und Gerät
        match /dailySessions/{sessionId} {
          allow create: if request.auth != null
            && request.auth.uid == userId
            // pro Tag/Gerät nur ein Dokument
            && !exists(/databases/$(database)/documents
                       /gyms/$(gymId)/leaderboard/$(userId)
                       /dailySessions/$(sessionId))
            // nur Einzelgeräte werden gezählt
            && get(/databases/$(database)/documents
                    /gyms/$(gymId)/devices
                    /$(request.resource.data.deviceId)).data.isMulti == false
            && request.resource.data.keys().hasOnly(['deviceId', 'date'])
            && request.resource.data.deviceId is string
            && request.resource.data.date     is string;
          allow read:   if request.auth != null && request.auth.uid == userId;
          allow update, delete: if false;
        }
      }
    }

    // --- User-Dokumente ---
    match /users/{userId} {
      // Anlage eines Users mit den Standardfeldern.
      allow create: if request.auth != null
        && request.auth.uid == userId
        && request.resource.data.keys().hasOnly(
             ['email', 'gymCodes', 'showInLeaderboard', 'role', 'createdAt']
           )
        && request.resource.data.email             is string
        && request.resource.data.gymCodes          is list
        && request.resource.data.showInLeaderboard is bool
        && request.resource.data.role in ['member', 'admin']
        && request.resource.data.createdAt         is timestamp;

      // Lesen nur durch den Nutzer selbst.
      allow read: if request.auth != null && request.auth.uid == userId;

      // Nutzer kann lediglich seinen showInLeaderboard-Wert ändern.
      allow update: if request.auth != null
        && request.auth.uid == userId
        && request.resource.data.keys().hasOnly(['showInLeaderboard'])
        && request.resource.data.showInLeaderboard is bool;

      allow delete: if false;
    }
  }
}
