rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ─────────────────────────
    // Helper Functions
    // ─────────────────────────
    function isAuthed() {
      return request.auth != null;
    }

    // Membership: either custom claim gymId or membership doc under gym
    function inGym(gymId) {
      return isAuthed() && (
        request.auth.token.gymId == gymId ||
        exists(/databases/$(database)/documents/gyms/$(gymId)/users/$(request.auth.uid))
      );
    }

    // Admin if claim says admin OR membership role == admin
    function isAdmin(gymId) {
      return inGym(gymId) && (
        request.auth.token.role == 'admin' ||
        get(/databases/$(database)/documents/gyms/$(gymId)/users/$(request.auth.uid)).data.role == 'admin'
      );
    }

    function isOwner(userId) {
      return isAuthed() && request.auth.uid == userId;
    }

    // Friend relation exists (symmetrische Kante)
    function isFriend(owner, viewer) {
      return exists(/databases/$(database)/documents/users/$(owner)/friends/$(viewer));
    }

    // Share at least one gym code (robust gegen fehlende Felder)
    function sharesGym(owner, viewer) {
      let ownerDoc = get(/databases/$(database)/documents/users/$(owner)).data;
      let viewerDoc = get(/databases/$(database)/documents/users/$(viewer)).data;
      let a = ownerDoc.gymCodes;
      let b = viewerDoc.gymCodes;
      return a != null && b != null && a.hasAny(b);
    }

    // Convenience: owner in gym or admin
    function ownerOrAdmin(gymId, userId) {
      return (request.auth.uid == userId && inGym(gymId)) || isAdmin(gymId);
    }

    // Write must be performed by the owner within the gym
    function requestOwnerInGym(gymId) {
      return inGym(gymId) && request.resource.data.userId == request.auth.uid;
    }

    // Read must refer to a doc owned by requester within gym, or admin
    function resourceOwnerOrAdmin(gymId) {
      return (inGym(gymId) && resource.data.userId == request.auth.uid) || isAdmin(gymId);
    }

    // Public exercise if no userId set or empty (READ context uses resource)
    function isPublicExercise() {
      return !("userId" in resource.data) || resource.data.userId == null || resource.data.userId == "";
    }

    // ─────────────────────────
    // Global logs read (owner-only)
    // ─────────────────────────
    match /{path=**}/logs/{logId} {
      allow read: if isAuthed() && resource.data.userId == request.auth.uid;
    }

    // ─────────────────────────
    // Users (top-level)
    // ─────────────────────────
    match /users/{uid} {
      // Keep profile readable for authed users (e.g., username checks)
      allow create: if isOwner(uid);
      allow read: if isAuthed();
      allow update: if isOwner(uid);

      // Friend Requests (client-managed)
      match /friendRequests/{reqId} {
        // Recipient can read all; sender only their own request at recipient
        allow read: if isOwner(uid) ||
                      (isAuthed() && resource.data.fromUserId == request.auth.uid);

        allow create: if request.auth.uid == request.resource.data.fromUserId &&
                        uid == request.resource.data.toUserId &&
                        request.resource.data.fromUserId != request.resource.data.toUserId &&
                        request.resource.data.status == 'pending' &&
                        request.resource.data.keys().hasOnly(['fromUserId','toUserId','status','createdAt','updatedAt','message']) &&
                        request.resource.data.createdAt is timestamp &&
                        request.resource.data.updatedAt is timestamp &&
                        (!('message' in request.resource.data) ||
                         (request.resource.data.message is string &&
                          request.resource.data.message.size() <= 280));

        // accept/decline by recipient; cancel by sender
        allow update: if request.resource.data.keys().hasOnly(['fromUserId','toUserId','status','createdAt','updatedAt','message']) &&
                        request.resource.data.fromUserId == resource.data.fromUserId &&
                        request.resource.data.toUserId == resource.data.toUserId && (
                          (request.auth.uid == uid && resource.data.status == 'pending' &&
                            (request.resource.data.status == 'accepted' || request.resource.data.status == 'declined')) ||
                          (request.auth.uid == resource.data.fromUserId && resource.data.status == 'pending' &&
                            request.resource.data.status == 'canceled')
                        );
      }

      // Friends list (symmetrische Kante)
      match /friends/{fid} {
        allow read: if isOwner(uid);
        allow create: if isOwner(uid) &&
                        request.resource.data.friendUid == fid &&
                        request.resource.data.keys().hasOnly(['friendUid','since','createdAt','updatedAt','gymCodesAtAcceptance']) &&
                        (
                          exists(/databases/$(database)/documents/users/$(uid)/friendRequests/$(fid + '_' + uid)) &&
                          get(/databases/$(database)/documents/users/$(uid)/friendRequests/$(fid + '_' + uid)).data.status == 'accepted' ||
                          exists(/databases/$(database)/documents/users/$(fid)/friendRequests/$(uid + '_' + fid)) &&
                          get(/databases/$(database)/documents/users/$(fid)/friendRequests/$(uid + '_' + fid)).data.status == 'accepted'
                        );
        allow delete: if isOwner(uid);
      }

      // Privacy-aware public calendar (server writes)
      match /publicCalendar/{month} {
        allow read: if isAuthed() && (
          isOwner(uid) ||
          get(/databases/$(database)/documents/users/$(uid)).data.calendarVisibility == 'public' ||
          (
            get(/databases/$(database)/documents/users/$(uid)).data.calendarVisibility == 'friends' &&
            isFriend(uid, request.auth.uid)
          ) ||
          (
            get(/databases/$(database)/documents/users/$(uid)).data.calendarVisibility == 'same_gym' &&
            sharesGym(uid, request.auth.uid)
          )
        );
        allow write: if false; // only via Cloud Functions
      }

      // Friend meta & push tokens are owner-managed
      match /friendMeta/{doc} {
        allow read, write: if isOwner(uid);
      }

      match /pushTokens/{token} {
        allow read, write: if isOwner(uid);
      }

      // Fallback for other user subcollections (owner-only)
      match /{document=**} {
        allow read, write: if isOwner(uid);
      }
    }

    // ─────────────────────────
    // Gyms
    // ─────────────────────────
    match /gyms/{gymId} {
      // Public gym doc (non-sensitive fields only)
      allow read: if true;
      allow write: if isAdmin(gymId);

      // Branding / config
      match /config/{docId} {
        allow read: if isAuthed();
        allow write: if isAdmin(gymId);
      }

      // Devices
      match /devices/{deviceId} {
        allow read: if inGym(gymId);
        allow write: if isAdmin(gymId);

        // Device logs (immutable; owner append-only)
        match /logs/{logId} {
          allow create: if requestOwnerInGym(gymId);
          allow read: if resourceOwnerOrAdmin(gymId);
          allow update, delete: if false;
        }

        // Session snapshots per user (read owner/admin; write owner-only)
        match /sessions/{sessionId} {
          allow create: if requestOwnerInGym(gymId);
          allow read: if resourceOwnerOrAdmin(gymId);
          allow update, delete: if false;
        }

        // Per-user notes for device
        match /userNotes/{userId} {
          allow read, write: if ownerOrAdmin(gymId, userId);
        }

        // Leaderboard entries (owner/admin; enforce userId match)
        match /leaderboard/{userId}/{doc=**} {
          allow read, write: if ownerOrAdmin(gymId, userId) &&
                             request.resource.data.userId == userId;
        }

        // Custom exercises (public or owner; admin override)
        match /exercises/{exerciseId} {
          allow read: if isAdmin(gymId) ||
                       (inGym(gymId) &&
                        (request.auth.uid == resource.data.userId || isPublicExercise()));
          allow write: if inGym(gymId) && (
                          request.auth.uid == request.resource.data.userId ||
                          request.auth.uid == resource.data.userId
                        ) || isAdmin(gymId);
        }
      }

      // Surveys
      match /surveys/{surveyId} {
        allow read: if inGym(gymId);
        allow create, update, delete: if isAdmin(gymId);

        match /answers/{answerId} {
          allow create: if inGym(gymId) && request.auth.uid == request.resource.data.userId;
          allow read: if isAdmin(gymId);
          allow update, delete: if false;
        }
      }

      // Feedback
      match /feedback/{entryId} {
        allow create: if inGym(gymId) && request.resource.data.userId == request.auth.uid;
        allow read, update, delete: if isAdmin(gymId);
      }

      // Training plans
      match /trainingPlans/{planId}/{subdoc=**} {
        allow read, write: if inGym(gymId) && (
          isAdmin(gymId) ||
          request.auth.uid == request.resource.data.createdBy ||
          request.auth.uid == resource.data.createdBy
        );
      }

      // Muscle groups
      match /muscleGroups/{groupId} {
        allow read: if inGym(gymId);
        allow write: if isAdmin(gymId);
      }

      // Challenges
      match /challenges/{type}/{docId}/{sub=**} {
        allow read: if inGym(gymId);
        allow write: if isAdmin(gymId);
      }

      // Users subcollection under gym
      match /users/{userId} {
        allow read: if inGym(gymId);
        allow create: if isAuthed() &&
                       request.auth.uid == userId &&
                       request.resource.data.role == 'member';
        allow update, delete: if isAdmin(gymId);
      }

      match /users/{userId}/{doc=**} {
        allow read, write: if ownerOrAdmin(gymId, userId);
      }

      // Fallback inside gyms
      match /{document=**} {
        allow read: if inGym(gymId);
        allow write: if isAdmin(gymId);
      }
    }

    // ─────────────────────────
    // Deny everything else
    // ─────────────────────────
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
