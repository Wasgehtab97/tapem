rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // ----- Helper Functions -----
    function isSignedIn() {
      return request.auth != null;
    }

    // verify the request comes from the user's own gym
    // either via custom claim `gymId` or membership document
    function inGym(gymId) {
      return isSignedIn() && (
        request.auth.token.gymId == gymId ||
        exists(/databases/$(database)/documents/gyms/$(gymId)/users/$(request.auth.uid))
      );
    }

    // check admin role for this gym
    // admin can be indicated via custom claim or the role field in the gym membership
    function isAdmin(gymId) {
      return inGym(gymId) && (
        request.auth.token.role == 'admin' ||
        get(/databases/$(database)/documents/gyms/$(gymId)/users/$(request.auth.uid)).data.role == 'admin'
      );
    }

    // convenience helpers
    function ownerOrAdmin(gymId, userId) {
      return (request.auth.uid == userId && inGym(gymId)) || isAdmin(gymId);
    }
    function requestOwnerInGym(gymId) {
      return inGym(gymId) && request.resource.data.userId == request.auth.uid;
    }
    function resourceOwnerOrAdmin(gymId) {
      return (isSignedIn() && resource.data.userId == request.auth.uid) || isAdmin(gymId);
    }


    // Exercise is shared globally (no userId field or empty)
    function isPublicExercise() {
      return !("userId" in resource.data) || resource.data.userId == null || resource.data.userId == "";
    }

    // requestor is the owner of a user document
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isOwnerInGym(gymId, userId) {
      return inGym(gymId) && request.auth.uid == userId;
    }

    // check if the request targets only the gym document itself
    function isGymDocument(gymId) {
      return resource.__name__ ==
             "/databases/" + database + "/documents/gyms/" + gymId;
    }

    // Allow users to read their own log documents across all gyms.
    match /{path=**}/logs/{logId} {
      allow read: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    // ----- User documents -----
    // Only the authenticated user may read/write their user profile
    match /users/{userId} {
      allow create: if isOwner(userId);
      // Allow signed-in users to read usernames for availability checks
      allow read: if isSignedIn();
      // Permit username updates right after registration
      allow update: if isOwner(userId);
    }

    // Allow access to any nested collections under the user document
    match /users/{userId}/{document=**} {
      allow read, write: if isOwner(userId);
    }

    // ----- Gyms -----
    match /gyms/{gymId} {
      // Gym documents are readable for everyone to validate gym codes.
      // Write access remains restricted to admins.
      // Allow unauthenticated users to verify gym codes during registration
      allow read: if true;
      allow write: if isAdmin(gymId);

      // ---- Devices collection ----
      match /devices/{deviceId} {
        // Allow any authenticated user to read device information so that
        // training details can be displayed even before membership data exists.
        allow read: if inGym(gymId) || isSignedIn();
        allow write: if isAdmin(gymId);

        // Logs are appended by the owning user only. They are immutable.
        match /logs/{logId} {
          allow create: if requestOwnerInGym(gymId);
          // Allow users to read their own logs even if membership data
          // is not yet available. This prevents permission errors when
          // accessing training details shortly after registration.
          allow read: if resourceOwnerOrAdmin(gymId);
          allow update, delete: if false;
        }

        // Each user manages their own notes for the device.
        match /userNotes/{userId} {
          allow read, write: if ownerOrAdmin(gymId, userId);
        }

        // Leaderboard entries are updated per user.
        match /leaderboard/{userId}/{doc=**} {
          allow read, write: if ownerOrAdmin(gymId, userId);
        }

        // Custom exercises per user
        match /exercises/{exerciseId} {
          allow read: if isAdmin(gymId) ||
                       (isSignedIn() &&
                        (request.auth.uid == resource.data.userId || isPublicExercise()));
          allow write: if inGym(gymId) &&
                          (request.auth.uid == request.resource.data.userId ||
                           request.auth.uid == resource.data.userId) ||
                        isAdmin(gymId);
        }
      }

      // ---- Surveys ----
      match /surveys/{surveyId} {
        allow read: if inGym(gymId);
        allow create, update, delete: if isAdmin(gymId);

        // Users submit answers; only admins read all answers
        match /answers/{answerId} {
          allow create: if isOwnerInGym(gymId, request.auth.uid);
          allow read: if isAdmin(gymId);
          allow update, delete: if false;
        }
      }

      // ---- Feedback ----
      match /feedback/{entryId} {
        allow create: if inGym(gymId) &&
          request.resource.data.userId == request.auth.uid;
        allow read, update, delete: if isAdmin(gymId);
      }

      // ---- Training plans ----
      match /trainingPlans/{planId}/{subdoc=**} {
        allow read, write:
          if isAdmin(gymId) ||
             request.auth.uid == request.resource.data.createdBy ||
             request.auth.uid == resource.data.createdBy;
      }

      // ---- Muscle groups ----
      match /muscleGroups/{groupId} {
        allow read: if inGym(gymId);
        allow write: if isAdmin(gymId);
      }

      // ---- Challenges ----
      match /challenges/{type}/{docId}/{sub=**} {
        allow read: if inGym(gymId);
        allow write: if isAdmin(gymId);
      }

      // ---- Users subcollection ----
      // Users are referenced under their gym as well
      match /users/{userId} {
        // Allow initial creation for the authenticated user even before
        // membership exists. Further reads/writes require gym membership or
        // admin role.
        allow create: if isOwner(userId);
        allow read, update, delete: if ownerOrAdmin(gymId, userId);
      }
      match /users/{userId}/{doc=**} {
        allow read, write: if ownerOrAdmin(gymId, userId);
      }

      // Fallback for any other documents inside gyms
      match /{document=**} {
        allow read: if inGym(gymId);
        allow write: if isAdmin(gymId);
      }
    }

    // Deny everything else by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
