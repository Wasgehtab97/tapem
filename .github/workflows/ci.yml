name: CI

on:
  push:
    branches-ignore:
      - main
      - production
  pull_request:
    branches-ignore:
      - main
      - production

env:
  FLUTTER_CHANNEL: stable

jobs:
  lint:
    name: Lint & Analyze
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ env.FLUTTER_CHANNEL }}

      - name: Cache Pub & Dart tool files
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
            .dart_tool
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}

      - name: Install Dart dependencies
        run: flutter pub get

      - name: Check Dart formatting
        run: dart format --set-exit-if-changed .

      - name: Analyze code
        run: flutter analyze

  test:
    name: Unit & Widget Tests
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ env.FLUTTER_CHANNEL }}

      - name: Install Dart dependencies
        run: flutter pub get

      - name: Run tests with coverage
        run: flutter test --coverage

  rules_test:
    name: Firestore Security Rules Tests
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Install JS dependencies
        run: npm ci

      - name: Run Firestore security-rules tests
        run: |
          firebase emulators:exec \
            --only firestore \
            --project tap-em \
            "npx mocha --timeout 120000 firestore-tests/security_rules.test.js"

  build:
    name: Build APKs (Matrix)
    needs: rules_test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        flavor: [dev, prod]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ env.FLUTTER_CHANNEL }}

      - name: Install Dart dependencies
        run: flutter pub get

      - name: Build APK (${{ matrix.flavor }})
        run: flutter build apk --flavor ${{ matrix.flavor }} --release

  coverage_report:
    name: Upload Coverage Report
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/

  upload_apks:
    name: Upload APK Artifacts
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Upload APKs
        uses: actions/upload-artifact@v4
        with:
          name: apks
          path: build/app/outputs/flutter-apk/*.apk

  deploy_placeholder:
    name: Deploy Placeholder
    if: false
    runs-on: ubuntu-latest
    steps:
      - name: Stub deployment step
        run: echo "Deployment placeholder â€“ configure secrets in Sprint 1"